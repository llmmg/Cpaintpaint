Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> PRINT expression
Rule 6     structure -> FOR ( expression , assignation ) { programme }
Rule 7     structure -> WHILE expression { programme }
Rule 8     structure -> IF expression { programme }
Rule 9     statement -> PRINTPIXEL ( expression , expression , expression , expression , expression )
Rule 10    expression -> expression ADD_OP expression
Rule 11    expression -> expression MUL_OP expression
Rule 12    expression -> expression EQUAL expression
Rule 13    expression -> expression NOTEQUAL expression
Rule 14    expression -> expression < expression
Rule 15    expression -> expression > expression
Rule 16    expression -> NUMBER
Rule 17    expression -> IDENTIFIER
Rule 18    expression -> ( expression )
Rule 19    expression -> ADD_OP expression
Rule 20    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 6 9 18
)                    : 6 9 18
,                    : 6 9 9 9 9
;                    : 2
<                    : 14
=                    : 20
>                    : 15
ADD_OP               : 10 19
EQUAL                : 12
FOR                  : 6
IDENTIFIER           : 17 20
IF                   : 8
MUL_OP               : 11
NOTEQUAL             : 13
NUMBER               : 16
PRINT                : 5
PRINTPIXEL           : 9
WHILE                : 7
error                : 
{                    : 6 7 8
}                    : 6 7 8

Nonterminals, with rules where they appear

assignation          : 3 6
expression           : 5 6 7 8 9 9 9 9 9 10 10 11 11 12 12 13 13 14 14 15 15 18 19 20
programme            : 2 6 7 8 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (9) statement -> . PRINTPIXEL ( expression , expression , expression , expression , expression )
    (20) assignation -> . IDENTIFIER = expression
    (6) structure -> . FOR ( expression , assignation ) { programme }
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }

    PRINT           shift and go to state 4
    PRINTPIXEL      shift and go to state 2
    IDENTIFIER      shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 5

    assignation                    shift and go to state 1
    structure                      shift and go to state 8
    statement                      shift and go to state 10
    programme                      shift and go to state 3

state 1

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)


state 2

    (9) statement -> PRINTPIXEL . ( expression , expression , expression , expression , expression )

    (               shift and go to state 11


state 3

    (0) S' -> programme .



state 4

    (5) statement -> PRINT . expression
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 14

state 5

    (8) structure -> IF . expression { programme }
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 17

state 6

    (20) assignation -> IDENTIFIER . = expression

    =               shift and go to state 18


state 7

    (6) structure -> FOR . ( expression , assignation ) { programme }

    (               shift and go to state 19


state 8

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 9

    (7) structure -> WHILE . expression { programme }
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 20

state 10

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    }               reduce using rule 1 (programme -> statement .)
    $end            reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 21


state 11

    (9) statement -> PRINTPIXEL ( . expression , expression , expression , expression , expression )
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 22

state 12

    (19) expression -> ADD_OP . expression
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 23

state 13

    (18) expression -> ( . expression )
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 24

state 14

    (5) statement -> PRINT expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ;               reduce using rule 5 (statement -> PRINT expression .)
    $end            reduce using rule 5 (statement -> PRINT expression .)
    }               reduce using rule 5 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 15

    (17) expression -> IDENTIFIER .

    ,               reduce using rule 17 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 17 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 17 (expression -> IDENTIFIER .)
    EQUAL           reduce using rule 17 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 17 (expression -> IDENTIFIER .)
    <               reduce using rule 17 (expression -> IDENTIFIER .)
    >               reduce using rule 17 (expression -> IDENTIFIER .)
    {               reduce using rule 17 (expression -> IDENTIFIER .)
    ;               reduce using rule 17 (expression -> IDENTIFIER .)
    $end            reduce using rule 17 (expression -> IDENTIFIER .)
    }               reduce using rule 17 (expression -> IDENTIFIER .)
    )               reduce using rule 17 (expression -> IDENTIFIER .)


state 16

    (16) expression -> NUMBER .

    ,               reduce using rule 16 (expression -> NUMBER .)
    ADD_OP          reduce using rule 16 (expression -> NUMBER .)
    MUL_OP          reduce using rule 16 (expression -> NUMBER .)
    EQUAL           reduce using rule 16 (expression -> NUMBER .)
    NOTEQUAL        reduce using rule 16 (expression -> NUMBER .)
    <               reduce using rule 16 (expression -> NUMBER .)
    >               reduce using rule 16 (expression -> NUMBER .)
    {               reduce using rule 16 (expression -> NUMBER .)
    ;               reduce using rule 16 (expression -> NUMBER .)
    $end            reduce using rule 16 (expression -> NUMBER .)
    }               reduce using rule 16 (expression -> NUMBER .)
    )               reduce using rule 16 (expression -> NUMBER .)


state 17

    (8) structure -> IF expression . { programme }
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    {               shift and go to state 31
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 18

    (20) assignation -> IDENTIFIER = . expression
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 32

state 19

    (6) structure -> FOR ( . expression , assignation ) { programme }
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 33

state 20

    (7) structure -> WHILE expression . { programme }
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    {               shift and go to state 34
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 21

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (9) statement -> . PRINTPIXEL ( expression , expression , expression , expression , expression )
    (20) assignation -> . IDENTIFIER = expression
    (6) structure -> . FOR ( expression , assignation ) { programme }
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }

    PRINT           shift and go to state 4
    PRINTPIXEL      shift and go to state 2
    IDENTIFIER      shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 5

    assignation                    shift and go to state 1
    structure                      shift and go to state 8
    statement                      shift and go to state 10
    programme                      shift and go to state 35

state 22

    (9) statement -> PRINTPIXEL ( expression . , expression , expression , expression , expression )
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               shift and go to state 36
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 23

    (19) expression -> ADD_OP expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               reduce using rule 19 (expression -> ADD_OP expression .)
    ADD_OP          reduce using rule 19 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 19 (expression -> ADD_OP expression .)
    {               reduce using rule 19 (expression -> ADD_OP expression .)
    ;               reduce using rule 19 (expression -> ADD_OP expression .)
    $end            reduce using rule 19 (expression -> ADD_OP expression .)
    }               reduce using rule 19 (expression -> ADD_OP expression .)
    )               reduce using rule 19 (expression -> ADD_OP expression .)
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28

  ! EQUAL           [ reduce using rule 19 (expression -> ADD_OP expression .) ]
  ! NOTEQUAL        [ reduce using rule 19 (expression -> ADD_OP expression .) ]
  ! <               [ reduce using rule 19 (expression -> ADD_OP expression .) ]
  ! >               [ reduce using rule 19 (expression -> ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 26 ]
  ! MUL_OP          [ shift and go to state 27 ]


state 24

    (18) expression -> ( expression . )
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    )               shift and go to state 37
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 25

    (13) expression -> expression NOTEQUAL . expression
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 38

state 26

    (10) expression -> expression ADD_OP . expression
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 39

state 27

    (11) expression -> expression MUL_OP . expression
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 40

state 28

    (15) expression -> expression > . expression
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 41

state 29

    (12) expression -> expression EQUAL . expression
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 42

state 30

    (14) expression -> expression < . expression
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 43

state 31

    (8) structure -> IF expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (9) statement -> . PRINTPIXEL ( expression , expression , expression , expression , expression )
    (20) assignation -> . IDENTIFIER = expression
    (6) structure -> . FOR ( expression , assignation ) { programme }
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }

    PRINT           shift and go to state 4
    PRINTPIXEL      shift and go to state 2
    IDENTIFIER      shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 5

    assignation                    shift and go to state 1
    structure                      shift and go to state 8
    statement                      shift and go to state 10
    programme                      shift and go to state 44

state 32

    (20) assignation -> IDENTIFIER = expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ;               reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    )               reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 33

    (6) structure -> FOR ( expression . , assignation ) { programme }
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               shift and go to state 45
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 34

    (7) structure -> WHILE expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (9) statement -> . PRINTPIXEL ( expression , expression , expression , expression , expression )
    (20) assignation -> . IDENTIFIER = expression
    (6) structure -> . FOR ( expression , assignation ) { programme }
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }

    PRINT           shift and go to state 4
    PRINTPIXEL      shift and go to state 2
    IDENTIFIER      shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 5

    assignation                    shift and go to state 1
    structure                      shift and go to state 8
    statement                      shift and go to state 10
    programme                      shift and go to state 46

state 35

    (2) programme -> statement ; programme .

    }               reduce using rule 2 (programme -> statement ; programme .)
    $end            reduce using rule 2 (programme -> statement ; programme .)


state 36

    (9) statement -> PRINTPIXEL ( expression , . expression , expression , expression , expression )
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 47

state 37

    (18) expression -> ( expression ) .

    ,               reduce using rule 18 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 18 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 18 (expression -> ( expression ) .)
    EQUAL           reduce using rule 18 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 18 (expression -> ( expression ) .)
    <               reduce using rule 18 (expression -> ( expression ) .)
    >               reduce using rule 18 (expression -> ( expression ) .)
    {               reduce using rule 18 (expression -> ( expression ) .)
    ;               reduce using rule 18 (expression -> ( expression ) .)
    $end            reduce using rule 18 (expression -> ( expression ) .)
    }               reduce using rule 18 (expression -> ( expression ) .)
    )               reduce using rule 18 (expression -> ( expression ) .)


state 38

    (13) expression -> expression NOTEQUAL expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               reduce using rule 13 (expression -> expression NOTEQUAL expression .)
    ADD_OP          reduce using rule 13 (expression -> expression NOTEQUAL expression .)
    MUL_OP          reduce using rule 13 (expression -> expression NOTEQUAL expression .)
    EQUAL           reduce using rule 13 (expression -> expression NOTEQUAL expression .)
    {               reduce using rule 13 (expression -> expression NOTEQUAL expression .)
    ;               reduce using rule 13 (expression -> expression NOTEQUAL expression .)
    $end            reduce using rule 13 (expression -> expression NOTEQUAL expression .)
    }               reduce using rule 13 (expression -> expression NOTEQUAL expression .)
    )               reduce using rule 13 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28

  ! NOTEQUAL        [ reduce using rule 13 (expression -> expression NOTEQUAL expression .) ]
  ! <               [ reduce using rule 13 (expression -> expression NOTEQUAL expression .) ]
  ! >               [ reduce using rule 13 (expression -> expression NOTEQUAL expression .) ]
  ! ADD_OP          [ shift and go to state 26 ]
  ! MUL_OP          [ shift and go to state 27 ]
  ! EQUAL           [ shift and go to state 29 ]


state 39

    (10) expression -> expression ADD_OP expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               reduce using rule 10 (expression -> expression ADD_OP expression .)
    ADD_OP          reduce using rule 10 (expression -> expression ADD_OP expression .)
    {               reduce using rule 10 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 10 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 10 (expression -> expression ADD_OP expression .)
    }               reduce using rule 10 (expression -> expression ADD_OP expression .)
    )               reduce using rule 10 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28

  ! MUL_OP          [ reduce using rule 10 (expression -> expression ADD_OP expression .) ]
  ! EQUAL           [ reduce using rule 10 (expression -> expression ADD_OP expression .) ]
  ! NOTEQUAL        [ reduce using rule 10 (expression -> expression ADD_OP expression .) ]
  ! <               [ reduce using rule 10 (expression -> expression ADD_OP expression .) ]
  ! >               [ reduce using rule 10 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 26 ]


state 40

    (11) expression -> expression MUL_OP expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               reduce using rule 11 (expression -> expression MUL_OP expression .)
    ADD_OP          reduce using rule 11 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 11 (expression -> expression MUL_OP expression .)
    {               reduce using rule 11 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 11 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 11 (expression -> expression MUL_OP expression .)
    }               reduce using rule 11 (expression -> expression MUL_OP expression .)
    )               reduce using rule 11 (expression -> expression MUL_OP expression .)
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28

  ! EQUAL           [ reduce using rule 11 (expression -> expression MUL_OP expression .) ]
  ! NOTEQUAL        [ reduce using rule 11 (expression -> expression MUL_OP expression .) ]
  ! <               [ reduce using rule 11 (expression -> expression MUL_OP expression .) ]
  ! >               [ reduce using rule 11 (expression -> expression MUL_OP expression .) ]
  ! ADD_OP          [ shift and go to state 26 ]
  ! MUL_OP          [ shift and go to state 27 ]


state 41

    (15) expression -> expression > expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               reduce using rule 15 (expression -> expression > expression .)
    ADD_OP          reduce using rule 15 (expression -> expression > expression .)
    MUL_OP          reduce using rule 15 (expression -> expression > expression .)
    EQUAL           reduce using rule 15 (expression -> expression > expression .)
    NOTEQUAL        reduce using rule 15 (expression -> expression > expression .)
    <               reduce using rule 15 (expression -> expression > expression .)
    {               reduce using rule 15 (expression -> expression > expression .)
    ;               reduce using rule 15 (expression -> expression > expression .)
    $end            reduce using rule 15 (expression -> expression > expression .)
    }               reduce using rule 15 (expression -> expression > expression .)
    )               reduce using rule 15 (expression -> expression > expression .)
    >               shift and go to state 28

  ! >               [ reduce using rule 15 (expression -> expression > expression .) ]
  ! ADD_OP          [ shift and go to state 26 ]
  ! MUL_OP          [ shift and go to state 27 ]
  ! EQUAL           [ shift and go to state 29 ]
  ! NOTEQUAL        [ shift and go to state 25 ]
  ! <               [ shift and go to state 30 ]


state 42

    (12) expression -> expression EQUAL expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               reduce using rule 12 (expression -> expression EQUAL expression .)
    ADD_OP          reduce using rule 12 (expression -> expression EQUAL expression .)
    MUL_OP          reduce using rule 12 (expression -> expression EQUAL expression .)
    {               reduce using rule 12 (expression -> expression EQUAL expression .)
    ;               reduce using rule 12 (expression -> expression EQUAL expression .)
    $end            reduce using rule 12 (expression -> expression EQUAL expression .)
    }               reduce using rule 12 (expression -> expression EQUAL expression .)
    )               reduce using rule 12 (expression -> expression EQUAL expression .)
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28

  ! EQUAL           [ reduce using rule 12 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 12 (expression -> expression EQUAL expression .) ]
  ! <               [ reduce using rule 12 (expression -> expression EQUAL expression .) ]
  ! >               [ reduce using rule 12 (expression -> expression EQUAL expression .) ]
  ! ADD_OP          [ shift and go to state 26 ]
  ! MUL_OP          [ shift and go to state 27 ]


state 43

    (14) expression -> expression < expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               reduce using rule 14 (expression -> expression < expression .)
    ADD_OP          reduce using rule 14 (expression -> expression < expression .)
    MUL_OP          reduce using rule 14 (expression -> expression < expression .)
    EQUAL           reduce using rule 14 (expression -> expression < expression .)
    NOTEQUAL        reduce using rule 14 (expression -> expression < expression .)
    {               reduce using rule 14 (expression -> expression < expression .)
    ;               reduce using rule 14 (expression -> expression < expression .)
    $end            reduce using rule 14 (expression -> expression < expression .)
    }               reduce using rule 14 (expression -> expression < expression .)
    )               reduce using rule 14 (expression -> expression < expression .)
    <               shift and go to state 30
    >               shift and go to state 28

  ! <               [ reduce using rule 14 (expression -> expression < expression .) ]
  ! >               [ reduce using rule 14 (expression -> expression < expression .) ]
  ! ADD_OP          [ shift and go to state 26 ]
  ! MUL_OP          [ shift and go to state 27 ]
  ! EQUAL           [ shift and go to state 29 ]
  ! NOTEQUAL        [ shift and go to state 25 ]


state 44

    (8) structure -> IF expression { programme . }

    }               shift and go to state 48


state 45

    (6) structure -> FOR ( expression , . assignation ) { programme }
    (20) assignation -> . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 6

    assignation                    shift and go to state 49

state 46

    (7) structure -> WHILE expression { programme . }

    }               shift and go to state 50


state 47

    (9) statement -> PRINTPIXEL ( expression , expression . , expression , expression , expression )
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               shift and go to state 51
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 48

    (8) structure -> IF expression { programme } .

    ;               reduce using rule 8 (structure -> IF expression { programme } .)
    }               reduce using rule 8 (structure -> IF expression { programme } .)
    $end            reduce using rule 8 (structure -> IF expression { programme } .)


state 49

    (6) structure -> FOR ( expression , assignation . ) { programme }

    )               shift and go to state 52


state 50

    (7) structure -> WHILE expression { programme } .

    ;               reduce using rule 7 (structure -> WHILE expression { programme } .)
    }               reduce using rule 7 (structure -> WHILE expression { programme } .)
    $end            reduce using rule 7 (structure -> WHILE expression { programme } .)


state 51

    (9) statement -> PRINTPIXEL ( expression , expression , . expression , expression , expression )
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 53

state 52

    (6) structure -> FOR ( expression , assignation ) . { programme }

    {               shift and go to state 54


state 53

    (9) statement -> PRINTPIXEL ( expression , expression , expression . , expression , expression )
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               shift and go to state 55
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 54

    (6) structure -> FOR ( expression , assignation ) { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (9) statement -> . PRINTPIXEL ( expression , expression , expression , expression , expression )
    (20) assignation -> . IDENTIFIER = expression
    (6) structure -> . FOR ( expression , assignation ) { programme }
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }

    PRINT           shift and go to state 4
    PRINTPIXEL      shift and go to state 2
    IDENTIFIER      shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 5

    assignation                    shift and go to state 1
    structure                      shift and go to state 8
    statement                      shift and go to state 10
    programme                      shift and go to state 56

state 55

    (9) statement -> PRINTPIXEL ( expression , expression , expression , . expression , expression )
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 57

state 56

    (6) structure -> FOR ( expression , assignation ) { programme . }

    }               shift and go to state 58


state 57

    (9) statement -> PRINTPIXEL ( expression , expression , expression , expression . , expression )
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    ,               shift and go to state 59
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 58

    (6) structure -> FOR ( expression , assignation ) { programme } .

    ;               reduce using rule 6 (structure -> FOR ( expression , assignation ) { programme } .)
    }               reduce using rule 6 (structure -> FOR ( expression , assignation ) { programme } .)
    $end            reduce using rule 6 (structure -> FOR ( expression , assignation ) { programme } .)


state 59

    (9) statement -> PRINTPIXEL ( expression , expression , expression , expression , . expression )
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression EQUAL expression
    (13) expression -> . expression NOTEQUAL expression
    (14) expression -> . expression < expression
    (15) expression -> . expression > expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 16
    IDENTIFIER      shift and go to state 15
    (               shift and go to state 13
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 60

state 60

    (9) statement -> PRINTPIXEL ( expression , expression , expression , expression , expression . )
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . EQUAL expression
    (13) expression -> expression . NOTEQUAL expression
    (14) expression -> expression . < expression
    (15) expression -> expression . > expression

    )               shift and go to state 61
    ADD_OP          shift and go to state 26
    MUL_OP          shift and go to state 27
    EQUAL           shift and go to state 29
    NOTEQUAL        shift and go to state 25
    <               shift and go to state 30
    >               shift and go to state 28


state 61

    (9) statement -> PRINTPIXEL ( expression , expression , expression , expression , expression ) .

    ;               reduce using rule 9 (statement -> PRINTPIXEL ( expression , expression , expression , expression , expression ) .)
    $end            reduce using rule 9 (statement -> PRINTPIXEL ( expression , expression , expression , expression , expression ) .)
    }               reduce using rule 9 (statement -> PRINTPIXEL ( expression , expression , expression , expression , expression ) .)

